// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusMoto {
  AVAILABLE
  HIRED
  MAINTAIN
}

enum StatusOrder {
  INPROGRESS
  CANCLE
  RECEIVED
  PAID
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  email     String
  role      Role
  password  String
  deleteFlg Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Order     Order[]
}

model Moto {
  id                Int       @id @default(autoincrement())
  name              String
  yearOfManufacture DateTime
  producer          String
  listThumbnail     String
  color             String
  description       String
  licensePates      String
  rentCost          Int
  quantity          Int
  categoryId        Int
  deleteFlg         Boolean
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  CategoryMoto      Category  @relation(fields: [categoryId], references: [id])
  Order             Order[]
  Comment           Comment[]
}

model Order {
  id                Int         @id @default(autoincrement())
  rentalStartDate   DateTime
  leaseEndDate      DateTime
  receivingAddress  DateTime
  statusOrder       StatusOrder
  idMoto            Int
  idUserReceiver    Int
  deleteFlg         Boolean
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  UserReceiverOrder User        @relation(fields: [idUserReceiver], references: [id])
  motoOrder         Moto        @relation(fields: [idMoto], references: [id])
  userId            Int?
}

model Comment {
  id             Int      @id @default(autoincrement())
  motoId         Int
  idUserComment  Int
  contentComment String
  star           Int
  deleteFlg      Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userComment    User     @relation(fields: [idUserComment], references: [id])
  commentMoto    Moto     @relation(fields: [motoId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  thumnail  String
  deleteFlg Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Moto      Moto[]
}

model Banner {
  id        Int      @id @default(autoincrement())
  thumbnail String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
