// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusMoto {
  AVAILABLE
  HIRED
  MAINTAIN
}

enum StatusOrder {
  INPROGRESS
  CANCLE
  RECEIVED
  PAID
}

enum Role {
  ADMIN
  USER
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  phone         String
  email         String
  role          Role
  password      String
  deleteFlg     Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Order         Order[]
  userSend      Message[] @relation("user_send")
  userRecipient Message[] @relation("user_recipient")
  Notify        Notify[]
}

model Moto {
  id                Int      @id @default(autoincrement())
  name              String
  yearOfManufacture DateTime
  producer          String
  listThumbnail     String
  color             String
  description       String
  licensePates      String
  rentCost          Int
  quantity          Int
  categoryId        Int
  deleteFlg         Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  CategoryMoto      Category @relation(fields: [categoryId], references: [id])
  Order             Order[]
  Notify            Notify[]
}

model Order {
  id                Int         @id @default(autoincrement())
  rentalStartDate   DateTime
  leaseEndDate      DateTime
  receivingAddress  String
  giveCarAddress    String
  licensePlates     String
  depositPrice      Int
  statusOrder       StatusOrder
  allMoney          Int
  idCard            String
  idMoto            Int
  idUserReceiver    Int
  star              Int
  comment           String
  deleteFlg         Boolean
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  UserReceiverOrder User        @relation(fields: [idUserReceiver], references: [id])
  motoOrder         Moto        @relation(fields: [idMoto], references: [id])
  userId            Int?
}

model Notify {
  id                Int         @id @default(autoincrement())
  rentalStartDate   DateTime
  leaseEndDate      DateTime
  receivingAddress  String
  statusOrder       StatusOrder
  allMoney          Int
  idCard            String
  idMoto            Int
  idUserReceiver    Int
  star              Int
  comment           String
  deleteFlg         Boolean
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  UserReceiverOrder User        @relation(fields: [idUserReceiver], references: [id])
  motoOrder         Moto        @relation(fields: [idMoto], references: [id])
  userId            Int?
}

model Message {
  id                Int      @id @default(autoincrement())
  idPersonSend      Int
  idPersonRecipient Int
  message           String
  deleteFlg         Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userSend          User     @relation("user_send", fields: [idPersonSend], references: [id])
  userRecipient     User     @relation("user_recipient", fields: [idPersonRecipient], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  thumnail  String
  deleteFlg Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Moto      Moto[]
}

model Banner {
  id        Int      @id @default(autoincrement())
  thumbnail String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
